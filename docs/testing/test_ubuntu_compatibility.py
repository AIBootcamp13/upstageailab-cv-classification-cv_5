#!/usr/bin/env python3\n\"\"\"\nUbuntu 호환성 테스트 스크립트\nUbuntu 환경에서 프로젝트가 정상 작동하는지 확인합니다.\n\"\"\"\n\nimport sys\nimport os\nimport platform\nimport subprocess\nfrom pathlib import Path\n\ndef check_system_info():\n    \"\"\"시스템 정보 확인\"\"\"\n    print(\"🖥️  시스템 정보 확인\")\n    print(\"=\" * 50)\n    \n    system_info = {\n        'OS': platform.system(),\n        'OS Release': platform.release(),\n        'Architecture': platform.machine(),\n        'Python Version': platform.python_version(),\n        'Platform': platform.platform()\n    }\n    \n    for key, value in system_info.items():\n        print(f\"  {key}: {value}\")\n    \n    # Ubuntu 감지\n    is_ubuntu = False\n    if platform.system() == 'Linux':\n        try:\n            with open('/etc/os-release', 'r') as f:\n                content = f.read()\n                if 'ubuntu' in content.lower():\n                    is_ubuntu = True\n                    print(\"  ✅ Ubuntu 감지됨\")\n        except:\n            pass\n    \n    if not is_ubuntu and platform.system() == 'Linux':\n        print(\"  ⚠️  Linux 시스템이지만 Ubuntu가 아닐 수 있습니다\")\n    \n    return is_ubuntu\n\ndef check_python_environment():\n    \"\"\"Python 환경 확인\"\"\"\n    print(\"\\n🐍 Python 환경 확인\")\n    print(\"=\" * 50)\n    \n    # Python 버전 확인\n    python_version = sys.version_info\n    print(f\"  Python 버전: {python_version.major}.{python_version.minor}.{python_version.micro}\")\n    \n    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):\n        print(\"  ❌ Python 3.8 이상이 필요합니다\")\n        return False\n    else:\n        print(\"  ✅ Python 버전 호환\")\n    \n    # 필수 패키지 확인\n    required_packages = [\n        'torch', 'torchvision', 'numpy', 'pandas', 'pillow',\n        'albumentations', 'timm', 'scikit-learn', 'tqdm',\n        'wandb', 'matplotlib', 'seaborn'\n    ]\n    \n    missing_packages = []\n    for package in required_packages:\n        try:\n            __import__(package)\n            print(f\"  ✅ {package}\")\n        except ImportError:\n            print(f\"  ❌ {package} (누락)\")\n            missing_packages.append(package)\n    \n    if missing_packages:\n        print(f\"\\n  📦 누락된 패키지: {', '.join(missing_packages)}\")\n        print(\"     설치 명령어: pip install \" + ' '.join(missing_packages))\n        return False\n    \n    return True\n\ndef check_gpu_support():\n    \"\"\"GPU 지원 확인\"\"\"\n    print(\"\\n🚀 GPU 지원 확인\")\n    print(\"=\" * 50)\n    \n    try:\n        import torch\n        \n        # CUDA 확인\n        if torch.cuda.is_available():\n            gpu_count = torch.cuda.device_count()\n            gpu_name = torch.cuda.get_device_name(0)\n            print(f\"  ✅ CUDA 사용 가능\")\n            print(f\"     GPU 개수: {gpu_count}\")\n            print(f\"     GPU 이름: {gpu_name}\")\n            print(f\"     CUDA 버전: {torch.version.cuda}\")\n            \n            # GPU 메모리 확인\n            total_memory = torch.cuda.get_device_properties(0).total_memory / 1e9\n            print(f\"     GPU 메모리: {total_memory:.1f} GB\")\n            \n            return 'cuda'\n        else:\n            print(\"  ⚠️  CUDA 사용 불가 - CPU 모드로 실행\")\n            return 'cpu'\n            \n    except ImportError:\n        print(\"  ❌ PyTorch가 설치되지 않음\")\n        return None\n\ndef check_project_structure():\n    \"\"\"프로젝트 구조 확인\"\"\"\n    print(\"\\n📁 프로젝트 구조 확인\")\n    print(\"=\" * 50)\n    \n    project_root = Path.cwd()\n    \n    required_files = [\n        'codes/config.py',\n        'codes/device_utils.py',\n        'codes/wandb_utils.py',\n        'codes/train_with_wandb.py',\n        'menu.sh'\n    ]\n    \n    required_dirs = [\n        'data',\n        'models',\n        'logs',\n        'codes'\n    ]\n    \n    # 필수 디렉토리 확인\n    for dir_name in required_dirs:\n        dir_path = project_root / dir_name\n        if dir_path.exists():\n            print(f\"  ✅ {dir_name}/\")\n        else:\n            print(f\"  ❌ {dir_name}/ (누락)\")\n    \n    # 필수 파일 확인\n    for file_path in required_files:\n        full_path = project_root / file_path\n        if full_path.exists():\n            print(f\"  ✅ {file_path}\")\n        else:\n            print(f\"  ❌ {file_path} (누락)\")\n    \n    # 데이터 파일 확인\n    data_files = ['data/train.csv', 'data/sample_submission.csv']\n    for data_file in data_files:\n        data_path = project_root / data_file\n        if data_path.exists():\n            print(f\"  ✅ {data_file}\")\n        else:\n            print(f\"  ⚠️  {data_file} (선택사항)\")\n\ndef test_device_detection():\n    \"\"\"디바이스 감지 테스트\"\"\"\n    print(\"\\n🔧 디바이스 감지 테스트\")\n    print(\"=\" * 50)\n    \n    try:\n        # 프로젝트 디렉토리 추가\n        sys.path.append(str(Path.cwd() / 'codes'))\n        \n        from device_utils import setup_training_device, get_dataloader_config\n        \n        print(\"  디바이스 감지 중...\")\n        device, device_type = setup_training_device()\n        \n        print(f\"  ✅ 감지된 디바이스: {device} ({device_type})\")\n        \n        # DataLoader 설정 확인\n        dataloader_config = get_dataloader_config(device_type)\n        print(f\"  📊 DataLoader 설정:\")\n        for key, value in dataloader_config.items():\n            print(f\"     {key}: {value}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ❌ 디바이스 감지 실패: {e}\")\n        return False\n\ndef test_simple_training():\n    \"\"\"간단한 훈련 테스트\"\"\"\n    print(\"\\n🧪 간단한 훈련 테스트\")\n    print(\"=\" * 50)\n    \n    try:\n        import torch\n        import torch.nn as nn\n        import numpy as np\n        \n        # 간단한 모델 생성\n        model = nn.Linear(10, 1)\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        model = model.to(device)\n        \n        # 더미 데이터 생성\n        x = torch.randn(32, 10).to(device)\n        y = torch.randn(32, 1).to(device)\n        \n        # 순전파 테스트\n        output = model(x)\n        loss = nn.MSELoss()(output, y)\n        \n        # 역전파 테스트\n        loss.backward()\n        \n        print(f\"  ✅ 순전파/역전파 테스트 성공\")\n        print(f\"     디바이스: {device}\")\n        print(f\"     손실값: {loss.item():.4f}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ❌ 훈련 테스트 실패: {e}\")\n        return False\n\ndef check_permissions():\n    \"\"\"파일 권한 확인\"\"\"\n    print(\"\\n🔐 파일 권한 확인\")\n    print(\"=\" * 50)\n    \n    project_root = Path.cwd()\n    \n    # 쓰기 권한이 필요한 디렉토리\n    write_dirs = ['models', 'logs', 'data']\n    \n    for dir_name in write_dirs:\n        dir_path = project_root / dir_name\n        if dir_path.exists():\n            if os.access(dir_path, os.W_OK):\n                print(f\"  ✅ {dir_name}/ (쓰기 가능)\")\n            else:\n                print(f\"  ❌ {dir_name}/ (쓰기 불가)\")\n        else:\n            try:\n                dir_path.mkdir(parents=True, exist_ok=True)\n                print(f\"  ✅ {dir_name}/ (생성됨)\")\n            except PermissionError:\n                print(f\"  ❌ {dir_name}/ (생성 불가)\")\n    \n    # 실행 권한 확인\n    menu_script = project_root / 'menu.sh'\n    if menu_script.exists():\n        if os.access(menu_script, os.X_OK):\n            print(f\"  ✅ menu.sh (실행 가능)\")\n        else:\n            print(f\"  ⚠️  menu.sh (실행 권한 없음)\")\n            print(f\"     해결 방법: chmod +x menu.sh\")\n\ndef run_all_tests():\n    \"\"\"모든 테스트 실행\"\"\"\n    print(\"🔍 Ubuntu 호환성 테스트 시작\")\n    print(\"=\" * 60)\n    \n    tests = [\n        (\"시스템 정보\", check_system_info),\n        (\"Python 환경\", check_python_environment), \n        (\"GPU 지원\", check_gpu_support),\n        (\"프로젝트 구조\", check_project_structure),\n        (\"디바이스 감지\", test_device_detection),\n        (\"간단한 훈련\", test_simple_training),\n        (\"파일 권한\", check_permissions)\n    ]\n    \n    results = []\n    \n    for test_name, test_func in tests:\n        try:\n            result = test_func()\n            results.append((test_name, result))\n        except Exception as e:\n            print(f\"\\n❌ {test_name} 테스트 중 오류: {e}\")\n            results.append((test_name, False))\n    \n    # 결과 요약\n    print(\"\\n\" + \"=\" * 60)\n    print(\"📊 테스트 결과 요약\")\n    print(\"=\" * 60)\n    \n    passed = 0\n    total = len([r for r in results if r[1] is not None])\n    \n    for test_name, result in results:\n        if result is True:\n            print(f\"  ✅ {test_name}\")\n            passed += 1\n        elif result is False:\n            print(f\"  ❌ {test_name}\")\n        else:\n            print(f\"  ℹ️  {test_name} (정보만 표시)\")\n    \n    print(f\"\\n📈 통과율: {passed}/{total} ({passed/total*100:.1f}%)\")\n    \n    if passed == total:\n        print(\"\\n🎉 모든 테스트 통과! Ubuntu에서 정상 실행 가능합니다.\")\n    elif passed >= total * 0.8:\n        print(\"\\n⚠️  대부분의 테스트 통과. 일부 기능에 제한이 있을 수 있습니다.\")\n    else:\n        print(\"\\n❌ 여러 테스트 실패. 환경 설정을 확인해주세요.\")\n        print(\"\\n💡 해결 방법:\")\n        print(\"   1. 필수 패키지 설치: pip install -r requirements.txt\")\n        print(\"   2. CUDA 설치 (GPU 사용 시): NVIDIA 드라이버 및 CUDA 툴킷\")\n        print(\"   3. 파일 권한 설정: chmod +x menu.sh\")\n        print(\"   4. 프로젝트 구조 확인: 필수 파일/디렉토리 누락 여부\")\n\nif __name__ == \"__main__\":\n    run_all_tests()\n